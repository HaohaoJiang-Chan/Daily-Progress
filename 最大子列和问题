/*最大子列和问题*/

#include <stdio.h>
#define MAXN 100000 	//定义本题最大数据是10万个

int MaxSubseqSum1 ( int A[], int N);	
/*法一：三重循环，每求一次子列都要将其后所有数字累加一遍*/
int MaxSubseqSum2 ( int A[], int N);
/*法二：二重循环，我们只要每次在右端累加一项，即可求得每一个子列的和*/
int MaxSubseqSum3 ( int List[], int N );

int MaxSubseqSum4 ( int A[], int N );

int main(void){
	int k, i;
	int a[MAXN] = {0};

	scanf("%d", &k);	//输入数据个数
	for ( i = 0; i < k; i++ )	
		scanf("%d", &a[i]);		//输入子列
	printf( "%d\n", MaxSubseqSum4 (a,k) );	//不同的求解方法修改此处的函数名即可

	return 0;
}

int MaxSubseqSum1 ( int A[], int N){	//暴力求解算法，算法复杂度为O(N^3)

	int ThisSum, MaxSum = 0;
	int i, j, k;

	for ( i = 0; i < N; i++ ){		//i是子列左端位置
		for ( j = i; j < N; j++ ){		//j是子列右端位置
			ThisSum = 0;	//每轮计算都要把ThisSum归零，累加新的一轮的子列和			
			for ( k = i; k < j; k++ )	//将A[i]~A[j]累加，得到子列和
				ThisSum += A[k];
			if ( ThisSum > MaxSum )
				MaxSum = ThisSum;

		}
	}
	return MaxSum;
}

int MaxSubseqSum2 ( int A[], int N){
	int ThisSum, MaxSum = 0;
	int i, j;

	for ( i = 0; i < N; i++ ){
		ThisSum = 0;

		for ( j = i; j < N; j++ ){
			ThisSum += A[j];
		if ( ThisSum > MaxSum )
			MaxSum = ThisSum;
		}

	}
	return MaxSum;
}

int Max3( int A, int B, int C )
{ /* 返回3个整数中的最大值 */
    return (A > B) ? (A > C ? A : C) : (B > C ? B : C);
}
 
int DivideAndConquer( int List[], int left, int right )
{ /* 分治法求List[left]到List[right]的最大子列和 */
    int MaxLeftSum, MaxRightSum; /* 存放左右子问题的解 */
    int MaxLeftBorderSum, MaxRightBorderSum; /*存放跨分界线的结果*/
 
    int LeftBorderSum, RightBorderSum;
    int center, i;
 
    if( left == right )  { /* 递归的终止条件，子列只有1个数字 */
        if( List[left] > 0 )  return List[left];
        else return 0;
    }
 
    /* 下面是"分"的过程 */
    center = ( left + right ) / 2; /* 找到中分点 */
    /* 递归求得两边子列的最大和 */
    MaxLeftSum = DivideAndConquer( List, left, center );
    MaxRightSum = DivideAndConquer( List, center+1, right );
 
    /* 下面求跨分界线的最大子列和 */
    MaxLeftBorderSum = 0; LeftBorderSum = 0;
    for( i=center; i>=left; i-- ) { /* 从中线向左扫描 */
        LeftBorderSum += List[i];
        if( LeftBorderSum > MaxLeftBorderSum )
            MaxLeftBorderSum = LeftBorderSum;
    } /* 左边扫描结束 */
 
    MaxRightBorderSum = 0; RightBorderSum = 0;
    for( i=center+1; i<=right; i++ ) { /* 从中线向右扫描 */
        RightBorderSum += List[i];
        if( RightBorderSum > MaxRightBorderSum )
            MaxRightBorderSum = RightBorderSum;
    } /* 右边扫描结束 */
 
    /* 下面返回"治"的结果 */
    return Max3( MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum );
}
 
int MaxSubseqSum3( int List[], int N )
{ /* 保持与前2种算法相同的函数接口 */
    return DivideAndConquer( List, 0, N-1 );
}

int MaxSubseqSum4 ( int A[], int N ){
	int ThisSum, MaxSum, i;

	ThisSum = MaxSum = 0;
	for ( i = 0; i < N; i++ ){
		ThisSum += A[i];
		if ( ThisSum > MaxSum )
			MaxSum = ThisSum;
		else if( ThisSum < 0 )
			ThisSum = 0;
	}

	return MaxSum;
}
